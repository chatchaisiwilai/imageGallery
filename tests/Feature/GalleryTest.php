<?php

namespace Tests\Feature;

use App\Images;
use App\User;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class GalleryTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = factory(User::class)->create();
        $this->actingAs($user);

        Storage::fake('local');
    }

    public function testIndex()
    {
        $response = $this
            ->get('/gallery');

        $response->assertStatus(200);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertStringContainsString('gallery-component', $response->getContent());
    }

    public function testPostImageValidateFailed()
    {
        $response = $this->json('post','/gallery/image');

        $response->assertStatus(422);
    }

    public function testPostImageValidateFailedOverSize()
    {
        Storage::fake('local');

        $file = UploadedFile::fake()->image('abc.jpeg')->size(999999);

        $response = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $response->assertStatus(422);
    }

    public function testPostImageValidateFailedMime()
    {
        Storage::fake('local');

        $file = UploadedFile::fake()->image('abc.pdf');

        $response = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $response->assertStatus(422);
    }

    public function testPostImage()
    {
        $file = UploadedFile::fake()->image('abc.jpeg');

        $response = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $response->assertStatus(200);
        $this->assertDatabaseHas('images', ['name' => 'abc.jpeg']);
        $this->assertTrue(Storage::disk('local')->exists('images/'.$file->hashName()));
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testPostImageFailed()
    {
        $mock = \Mockery::mock('overload:'. Images::class);
        $mock->shouldReceive('create')->andThrow(new \Exception('some error'));

        $file = UploadedFile::fake()->image('abc.jpeg');

        $response = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $response->assertStatus(400);
    }

    public function testGetAllImage()
    {
        $file1 = UploadedFile::fake()->image('abc1.jpeg');
        $this->json('post','/gallery/image', [
            'file' => $file1
        ]);

        $file2 = UploadedFile::fake()->image('abc2.jpeg');
        $this->json('post','/gallery/image', [
            'file' => $file2
        ]);

        $response = $this->get('/gallery/image');

        $response->assertStatus(200);

        $array = json_decode($response->content(), 1);

        $this->assertTrue(Arr::get($array, '0.path') == $file1->hashName('images'));
        $this->assertTrue(Arr::get($array, '1.path') == $file2->hashName('images'));
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testGetAllImageFailed()
    {
        $mock = \Mockery::mock('overload:'. Images::class);
        $mock->shouldReceive('where->get')->andThrow(new \Exception('some error'));

        $response = $this->get('/gallery/image');

        $response->assertStatus(400);

    }

    public function testGetImage()
    {
        $file = UploadedFile::fake()->image('abc.jpeg');
        $post_image = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $array = json_decode($post_image->content(), 1);

        $response = $this->get('/gallery/image/' . Arr::get($array, 'id'));

        $response->assertStatus(200);
    }

    public function testGetImageFailedNoFileInStorage()
    {
        $file = UploadedFile::fake()->image('abc.jpeg');
        $post_image = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        Storage::delete($file->hashName('images'));

        $array = json_decode($post_image->content(), 1);

        $response = $this->get('/gallery/image/' . Arr::get($array, 'id'));

        $response->assertStatus(400);
    }

    public function testGetImageFailed()
    {
        $response = $this->get('/gallery/image/1');

        $response->assertStatus(400);
    }

    public function testDeleteImage()
    {
        $file = UploadedFile::fake()->image('abc.jpeg');
        $post_image = $this->json('post','/gallery/image', [
            'file' => $file
        ]);

        $array = json_decode($post_image->content(), 1);

        $response = $this->delete('/gallery/image/' . Arr::get($array, 'id'));

        $response->assertStatus(200);
    }

    public function testDeleteImageFailed()
    {
        $response = $this->delete('/gallery/image/1');

        $response->assertStatus(400);
    }
}
